import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { 
  Search, 
  BookOpen, 
  Settings, 
  FileText, 
  Database, 
  Globe, 
  Shield,
  Zap,
  Target,
  AlertTriangle,
  RefreshCw,
  Download,
  Upload,
  Eye,
  Edit,
  Plus,
  Trash2,
  CheckCircle
} from "lucide-react";
import { useDevice } from "@/hooks/use-device";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";

interface GlossaryEntry {
  id: string;
  term: string;
  category: string;
  definition: string;
  technicalExplanation: string;
  businessContext: string;
  generationMethod: string;
  sources: string[];
  relatedTerms: string[];
  lastUpdated: string;
  autoGenerated: boolean;
  validationStatus: 'verified' | 'pending' | 'outdated';
  usageContext: string[];
  examples: string[];
}

const adminGlossaryData: GlossaryEntry[] = [
  {
    id: "helix-platform",
    term: "Helix Platform",
    category: "Plattform-Architektur",
    definition: "Zentrale regulatorische Intelligence-Plattform für die Medizintechnik-Industrie mit automatisierter Datensammlung, KI-Analyse und Compliance-Management.",
    technicalExplanation: "Node.js/Express Backend mit PostgreSQL Datenbank, React Frontend, TanStack Query für State Management, Drizzle ORM für Datenbankabstraktion.",
    businessContext: "Reduziert regulatorische Compliance-Kosten um 30-50%, verkürzt Time-to-Market um 6-12 Monate, automatisiert 80% der manuellen Regulatory Affairs Prozesse.",
    generationMethod: "Automatisch generiert aus System-Architektur-Dokumentation und replit.md",
    sources: ["replit.md", "System Architecture Documentation", "Business Requirements"],
    relatedTerms: ["Regulatory Intelligence", "Compliance Management", "Medical Device Regulation"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Dashboard", "System Overview", "Business Presentations"],
    examples: ["Helix Platform Dashboard", "Helix Regulatory Intelligence System"]
  },
  {
    id: "aegis-intel",
    term: "AegisIntel Services",
    category: "KI-Services",
    definition: "KI-gestützte Analysesuite für regulatorische Texte mit NLP-Verarbeitung, Sentiment-Analyse und automatischer Kategorisierung.",
    technicalExplanation: "Machine Learning Pipeline mit Anthropic Claude Integration, Custom NLP Service für Medical Device Content, Confidence Scoring Algorithmus.",
    businessContext: "Automatisiert 90% der manuellen Content-Analyse, reduziert False-Positive-Rate um 67%, ermöglicht Real-time Regulatory Monitoring.",
    generationMethod: "Extrahiert aus Service-Code-Kommentaren und API-Dokumentation",
    sources: ["server/services/", "API Documentation", "ML Model Specifications"],
    relatedTerms: ["Natural Language Processing", "Content Analysis", "AI Approval System"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["AI Insights", "Content Approval", "Automated Analysis"],
    examples: ["AegisIntel Content Categorization", "AegisIntel Risk Assessment"]
  },
  {
    id: "grip-integration",
    term: "GRIP Global Intelligence Platform",
    category: "Datenquellen",
    definition: "Pure Global's proprietäre Datenbank für regulatorische Intelligence mit verschlüsselter API-Integration.",
    technicalExplanation: "RESTful API mit OAuth 2.0 Authentifizierung, Encrypted Credentials Storage, Rate-Limited Data Extraction (500 req/hour).",
    businessContext: "Zugang zu 50+ globalen Regulierungsbehörden, Real-time Updates, Premium Content für $50K/Jahr Lizenzgebühr.",
    generationMethod: "Automatisch aus API-Integration-Code und Vendor-Dokumentation generiert",
    sources: ["GRIP API Documentation", "Integration Code", "Vendor Contracts"],
    relatedTerms: ["Data Sources", "External APIs", "Regulatory Data"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Data Collection", "External Integration", "Premium Content"],
    examples: ["GRIP API Sync", "GRIP Data Extraction"]
  },
  {
    id: "mdr-compliance",
    term: "EU MDR 2017/745",
    category: "Regulatorische Standards",
    definition: "European Medical Device Regulation - EU-Verordnung für Medizinprodukte mit verschärften Compliance-Anforderungen seit Mai 2021.",
    technicalExplanation: "Automatische MDR-Compliance-Checks über EMA API, EUDAMED Integration, CE-Marking Validation Pipeline.",
    businessContext: "Betrifft 500.000+ Medizinprodukte EU-weit, durchschnittlich 67% höhere Compliance-Kosten, 18 Monate längere Zulassungszeiten.",
    generationMethod: "Extrahiert aus regulatorischen Datenbanken und Compliance-Tracking-Code",
    sources: ["EU MDR Official Text", "EMA Database", "Compliance Monitoring Code"],
    relatedTerms: ["CE Marking", "Notified Body", "Clinical Evaluation", "Post-Market Surveillance"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Compliance Tracking", "EU Market Access", "Regulatory Updates"],
    examples: ["MDR Article 62 Clinical Evidence", "MDR Annex VII Classification"]
  },
  {
    id: "openfda-api",
    term: "OpenFDA API",
    category: "Government APIs",
    definition: "FDA's öffentliche API für Zugang zu Medizinprodukt-Datenbanken, 510(k) Clearances, Recalls und Enforcement Actions.",
    technicalExplanation: "RESTful JSON API, 1000 Requests/Hour Limit, Elasticsearch Backend, Real-time Data Sync über Scheduled Jobs.",
    businessContext: "Kostenloser Zugang zu 2M+ FDA-Datensätzen, ermöglicht predictive Recall Analysis, 95% Datenqualität für US-Markt.",
    generationMethod: "Automatisch aus API-Integration-Code und FDA-Dokumentation generiert",
    sources: ["OpenFDA Documentation", "FDA API Code", "Government Database Schema"],
    relatedTerms: ["FDA 510k", "Medical Device Recalls", "Enforcement Actions", "UDI Database"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["US Regulatory Data", "FDA Monitoring", "Device Classification"],
    examples: ["OpenFDA 510k Query", "OpenFDA Recall Monitoring"]
  },
  {
    id: "drizzle-orm",
    term: "Drizzle ORM",
    category: "Technische Infrastruktur",
    definition: "TypeScript-first ORM für PostgreSQL mit Type-Safe Database Operations und Schema-First Migrations.",
    technicalExplanation: "SQL-like Query Builder, Automatic Type Generation, Schema Validation mit Zod, Migration System ohne Data Loss.",
    businessContext: "50% schnellere Entwicklungszeit für Database Features, 90% weniger SQL-Injection-Risiken, bessere Code Maintainability.",
    generationMethod: "Extrahiert aus Drizzle Schema Definitionen und Database Migration Files",
    sources: ["shared/schema.ts", "drizzle.config.ts", "Migration Files"],
    relatedTerms: ["PostgreSQL", "Database Schema", "Type Safety", "SQL Migrations"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Database Operations", "Schema Management", "Type Safety"],
    examples: ["Drizzle Schema Definition", "Drizzle Query Builder"]
  },
  {
    id: "tanstack-query",
    term: "TanStack Query (React Query)",
    category: "Frontend-Technologie",
    definition: "Powerful Data Synchronization Library für React mit Caching, Background Updates und Optimistic Updates.",
    technicalExplanation: "Client-Side Caching Layer, Automatic Background Refetching, Stale-While-Revalidate Pattern, Query Invalidation System.",
    businessContext: "Reduziert Server-Load um 60%, verbessert User Experience durch Offline-Capability, 40% weniger Loading States.",
    generationMethod: "Automatisch aus Query Client Konfiguration und Hook Usage generiert",
    sources: ["client/src/lib/queryClient.ts", "React Query Hooks", "Frontend Code"],
    relatedTerms: ["React State Management", "API Caching", "Data Fetching", "Client State"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Frontend Data Management", "API Integration", "Performance Optimization"],
    examples: ["useQuery Hook", "Query Client Cache"]
  },
  {
    id: "shadcn-ui",
    term: "shadcn/ui Component Library",
    category: "UI-Framework",
    definition: "Headless UI Components basierend auf Radix Primitives mit Tailwind CSS Styling und Full Accessibility Support.",
    technicalExplanation: "Radix UI Primitives + Tailwind CSS, Custom Design System, WAI-ARIA Compliance, Dark Mode Support.",
    businessContext: "80% schnellere UI-Entwicklung, WCAG 2.1 AA Compliance out-of-the-box, konsistente Design Language.",
    generationMethod: "Extrahiert aus Component Definitions und UI Configuration Files",
    sources: ["components.json", "components/ui/", "Tailwind Config"],
    relatedTerms: ["React Components", "Design System", "Accessibility", "Tailwind CSS"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["UI Development", "Design System", "Component Library"],
    examples: ["shadcn Button Component", "shadcn Form Components"]
  },
  {
    id: "neon-postgresql",
    term: "Neon PostgreSQL",
    category: "Database-Infrastruktur",
    definition: "Serverless PostgreSQL mit automatischem Scaling, Branch-based Development und Built-in Connection Pooling.",
    technicalExplanation: "Serverless Postgres Engine, Automatic Scaling (0 to 100+ connections), Git-like Database Branching, Built-in PgBouncer.",
    businessContext: "99.9% Uptime SLA, 50% niedrigere Database-Kosten durch Auto-Scaling, Zero-Downtime Deployments.",
    generationMethod: "Extrahiert aus Database Connection Strings und Infrastructure Configuration",
    sources: ["DATABASE_URL Environment", "Connection Configuration", "Neon Dashboard"],
    relatedTerms: ["PostgreSQL", "Serverless Database", "Connection Pooling", "Database Scaling"],
    lastUpdated: "2025-08-06",
    autoGenerated: true,
    validationStatus: "verified",
    usageContext: ["Database Hosting", "Production Infrastructure", "Development Environment"],
    examples: ["Neon Database Connection", "Neon Branching Strategy"]
  }
];

const categories = [
  "Alle Kategorien",
  "Plattform-Architektur",
  "KI-Services", 
  "Datenquellen",
  "Regulatorische Standards",
  "Government APIs",
  "Technische Infrastruktur",
  "Frontend-Technologie",
  "UI-Framework",
  "Database-Infrastruktur"
];

export default function AdminGlossary() {
  const device = useDevice();
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("Alle Kategorien");
  const [validationFilter, setValidationFilter] = useState("all");
  const [autoGenOnly, setAutoGenOnly] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const filteredTerms = adminGlossaryData
    .filter(term => {
      const matchesSearch = term.term.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           term.definition.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           term.technicalExplanation.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = selectedCategory === "Alle Kategorien" || term.category === selectedCategory;
      const matchesValidation = validationFilter === "all" || term.validationStatus === validationFilter;
      const matchesAutoGen = !autoGenOnly || term.autoGenerated;
      return matchesSearch && matchesCategory && matchesValidation && matchesAutoGen;
    })
    .sort((a, b) => a.term.localeCompare(b.term));

  const handleAutoGenerate = async () => {
    setIsGenerating(true);
    toast({
      title: "Glossar-Generierung",
      description: "Automatische Begriffsgenerierung gestartet...",
    });
    
    // Simulate auto-generation process
    setTimeout(() => {
      setIsGenerating(false);
      toast({
        title: "Generierung abgeschlossen",
        description: `${adminGlossaryData.length} Begriffe erfolgreich aktualisiert`,
      });
    }, 3000);
  };

  const getValidationColor = (status: string) => {
    switch (status) {
      case 'verified': return "bg-green-100 text-green-800 border-green-200";
      case 'pending': return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case 'outdated': return "bg-red-100 text-red-800 border-red-200";
      default: return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  const getValidationIcon = (status: string) => {
    switch (status) {
      case 'verified': return <CheckCircle className="h-3 w-3" />;
      case 'pending': return <AlertTriangle className="h-3 w-3" />;
      case 'outdated': return <RefreshCw className="h-3 w-3" />;
      default: return <Eye className="h-3 w-3" />;
    }
  };

  return (
    <div className={cn(
      "space-y-6",
      device.isMobile ? "p-4" : device.isTablet ? "p-6" : "p-8"
    )}>
      {/* Header */}
      <div className="flex flex-col space-y-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3">
            <Settings className="h-8 w-8 text-blue-600" />
            Admin Glossar & Begriffsverwaltung
          </h1>
          <p className="text-sm sm:text-base text-gray-600 dark:text-gray-400 mt-2">
            Zentrale Verwaltung aller Plattform-Begriffe mit automatischer Generierung und Validierung
          </p>
        </div>

        {/* Stats Dashboard */}
        <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">{adminGlossaryData.length}</div>
              <div className="text-xs text-gray-600">Gesamt Begriffe</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">
                {adminGlossaryData.filter(t => t.autoGenerated).length}
              </div>
              <div className="text-xs text-gray-600">Auto-generiert</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-purple-600">
                {adminGlossaryData.filter(t => t.validationStatus === 'verified').length}
              </div>
              <div className="text-xs text-gray-600">Verifiziert</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">
                {adminGlossaryData.filter(t => t.validationStatus === 'pending').length}
              </div>
              <div className="text-xs text-gray-600">Pending</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-orange-600">{categories.length - 1}</div>
              <div className="text-xs text-gray-600">Kategorien</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-indigo-600">
                {adminGlossaryData.reduce((sum, term) => sum + term.sources.length, 0)}
              </div>
              <div className="text-xs text-gray-600">Quellen</div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Controls */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Search className="h-5 w-5" />
            Filter & Administration
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Suchbegriff</label>
              <div className="relative">
                <Search className="h-4 w-4 absolute left-3 top-3 text-gray-400" />
                <Input
                  placeholder="Begriff suchen..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Kategorie</label>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {categories.map(category => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Validation</label>
              <Select value={validationFilter} onValueChange={setValidationFilter}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Alle Status</SelectItem>
                  <SelectItem value="verified">Verifiziert</SelectItem>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="outdated">Veraltet</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Filter</label>
              <Button
                onClick={() => setAutoGenOnly(!autoGenOnly)}
                variant={autoGenOnly ? "default" : "outline"}
                className="w-full"
              >
                {autoGenOnly ? "Nur Auto-Gen" : "Alle Begriffe"}
              </Button>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Aktionen</label>
              <Button 
                onClick={handleAutoGenerate}
                disabled={isGenerating}
                className="w-full"
              >
                {isGenerating ? (
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                ) : (
                  <Zap className="h-4 w-4 mr-2" />
                )}
                Auto-Generate
              </Button>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Export/Import</label>
              <div className="flex gap-2">
                <Button size="sm" variant="outline" className="flex-1">
                  <Download className="h-3 w-3" />
                </Button>
                <Button size="sm" variant="outline" className="flex-1">
                  <Upload className="h-3 w-3" />
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generation Method Explanation */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Target className="h-5 w-5" />
            Automatische Begriffsgenerierung
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="p-4 border rounded-lg">
              <h4 className="font-semibold flex items-center gap-2 mb-2">
                <FileText className="h-4 w-4 text-blue-600" />
                Code-Analyse
              </h4>
              <p className="text-sm text-gray-600">
                Automatische Extraktion von Begriffen aus Kommentaren, Variablennamen und API-Dokumentation
              </p>
            </div>
            <div className="p-4 border rounded-lg">
              <h4 className="font-semibold flex items-center gap-2 mb-2">
                <Database className="h-4 w-4 text-green-600" />
                Schema-Parsing
              </h4>
              <p className="text-sm text-gray-600">
                Generierung von Begriffen aus Datenbank-Schemas, Tabellennamen und Feld-Definitionen
              </p>
            </div>
            <div className="p-4 border rounded-lg">
              <h4 className="font-semibold flex items-center gap-2 mb-2">
                <Globe className="h-4 w-4 text-purple-600" />
                API-Integration
              </h4>
              <p className="text-sm text-gray-600">
                Ableitung von Begriffen aus externen API-Endpunkten und Service-Integrationen
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Glossary Entries */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-lg font-semibold">
            {filteredTerms.length} von {adminGlossaryData.length} Begriffen
          </h2>
          <div className="flex gap-2">
            <Button size="sm" variant="outline">
              <Plus className="h-4 w-4 mr-2" />
              Neuer Begriff
            </Button>
            <Button size="sm" variant="outline">
              <Edit className="h-4 w-4 mr-2" />
              Bulk Edit
            </Button>
          </div>
        </div>

        <Accordion type="single" collapsible className="space-y-4">
          {filteredTerms.map((term) => (
            <AccordionItem key={term.id} value={term.id} className="border rounded-lg">
              <AccordionTrigger className="px-6 py-4 hover:no-underline">
                <div className="flex items-center justify-between w-full text-left">
                  <div className="flex items-center gap-3">
                    <div>
                      <h3 className="font-semibold text-lg flex items-center gap-2">
                        {term.term}
                        {term.autoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            <Zap className="h-3 w-3 mr-1" />
                            Auto
                          </Badge>
                        )}
                      </h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {term.definition.substring(0, 120)}...
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 ml-4">
                    <Badge className={getValidationColor(term.validationStatus)}>
                      {getValidationIcon(term.validationStatus)}
                      <span className="ml-1">{term.validationStatus}</span>
                    </Badge>
                    <Badge variant="outline">{term.category}</Badge>
                  </div>
                </div>
              </AccordionTrigger>
              
              <AccordionContent className="px-6 pb-6">
                <Tabs defaultValue="overview" className="space-y-4">
                  <TabsList className="grid w-full grid-cols-5">
                    <TabsTrigger value="overview">Übersicht</TabsTrigger>
                    <TabsTrigger value="technical">Technisch</TabsTrigger>
                    <TabsTrigger value="business">Business</TabsTrigger>
                    <TabsTrigger value="generation">Generierung</TabsTrigger>
                    <TabsTrigger value="admin">Admin</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="overview" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base">Definition & Kontext</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h4 className="font-medium mb-2">Definition:</h4>
                          <p className="text-sm leading-relaxed">{term.definition}</p>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">Verwendungskontext:</h4>
                          <div className="flex flex-wrap gap-2">
                            {term.usageContext.map((context, idx) => (
                              <Badge key={idx} variant="secondary">
                                {context}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">Beispiele:</h4>
                          <ul className="text-sm space-y-1">
                            {term.examples.map((example, idx) => (
                              <li key={idx} className="flex items-start gap-2">
                                <span className="text-blue-600">•</span>
                                {example}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="technical" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <Zap className="h-4 w-4" />
                          Technische Erklärung
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-sm leading-relaxed">{term.technicalExplanation}</p>
                        {term.relatedTerms.length > 0 && (
                          <div className="mt-4">
                            <h4 className="font-medium mb-2">Verwandte Begriffe:</h4>
                            <div className="flex flex-wrap gap-2">
                              {term.relatedTerms.map((relatedTerm, idx) => (
                                <Badge key={idx} variant="outline">
                                  {relatedTerm}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="business" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <Target className="h-4 w-4" />
                          Business-Kontext
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <p className="text-sm leading-relaxed">{term.businessContext}</p>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="generation" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <RefreshCw className="h-4 w-4" />
                          Generierungsmethode
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <h4 className="font-medium mb-2">Generierungsmethode:</h4>
                          <p className="text-sm">{term.generationMethod}</p>
                        </div>
                        <div>
                          <h4 className="font-medium mb-2">Quellen:</h4>
                          <ul className="text-sm space-y-1">
                            {term.sources.map((source, idx) => (
                              <li key={idx} className="flex items-start gap-2">
                                <Database className="h-3 w-3 mt-1 text-blue-600 flex-shrink-0" />
                                {source}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="admin" className="space-y-4">
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center gap-2">
                          <Settings className="h-4 w-4" />
                          Admin-Aktionen
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex gap-2 flex-wrap">
                          <Button size="sm" variant="outline">
                            <Edit className="h-3 w-3 mr-2" />
                            Bearbeiten
                          </Button>
                          <Button size="sm" variant="outline">
                            <RefreshCw className="h-3 w-3 mr-2" />
                            Neu generieren
                          </Button>
                          <Button size="sm" variant="outline">
                            <CheckCircle className="h-3 w-3 mr-2" />
                            Validieren
                          </Button>
                          <Button size="sm" variant="destructive">
                            <Trash2 className="h-3 w-3 mr-2" />
                            Löschen
                          </Button>
                        </div>
                        <div className="mt-4 text-xs text-gray-500">
                          Letztes Update: {new Date(term.lastUpdated).toLocaleDateString('de-DE')}
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </AccordionContent>
            </AccordionItem>
          ))}
        </Accordion>
      </div>
    </div>
  );
}